#quick and dirty script to handle tile map generation offsets
#for when you already have tiles loaded but you need a new auto generated map
import pdb


Rdata=  '''DB $00,$01,$02,$03,$04,$04,$04,$04,$05,$04,$04,$06,$07,$04,$04,$04
DB $08,$09,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$0A,$0B,$0C,$04,$04,$04,$0D,$0E,$04,$04,$0F,$10,$11,$04,$12
DB $13,$14,$15,$16,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F,$20,$04,$21,$22,$23,$24,$25
DB $26,$27,$28,$29,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $2A,$2B,$2C,$2D,$2E,$2F,$30,$31,$32,$33,$34,$35,$04,$36,$37,$38
DB $39,$3A,$3B,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
DB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04'''

#USER VARS

CLAMP_VALUES = [4] #these values will NOT be factored into offset calculations, values in CLAMP_CHANGES should also be here
OFFSET_VALUE = 0x44 #add this value to all values NOT contained CLAP_VALUES
CLAMP_CHANGES = {4:0} #change key to value in table

def gbHexFormat(val):
    outval = hex(val)[2:]
    if len(outval) == 1:
        outval = "0"+outval
    return outval.upper()

#read in asm tables and store them
def readData(data):
    databuffer = data.upper()
    databuffer = databuffer.replace("$","")
    databuffer = databuffer.replace("DB","")
    #databuffer = databuffer.replace("\n",",")
    databuffer = databuffer.split("\n")
    outBuffer = []
    #outBuffer.append(int(val,16))
    for tile in databuffer:
        outBuffer.append(tile.split(","))
    return outBuffer

def writeData(data):
    outString = ''
    for tile in data:
        outString += "DB "
        i = 0
        for val in tile:
            if i == 15:
                outString += "${}\n".format(gbHexFormat(val))
                continue
            outString += "${}, ".format(gbHexFormat(val))
            i += 1
    return outString

def calculateOffsets(data):
    outBuffer = []
    for tile in data:
        innerBuffer = []
        for val in tile:
            if val not in CLAMP_VALUES:
                innerBuffer.append(val + OFFSET_VALUE)
            else:
                innerBuffer.append(val)
        outBuffer.append(innerBuffer)
    return outBuffer

def calculateClampChange(data):
    outBuffer = []
    for tile in data:
        innerBuffer = []
        for val in tile:
            if val in CLAMP_VALUES:
                innerBuffer.append(CLAMP_CHANGES[val])
            else:
                innerBuffer.append(val)
        outBuffer.append(innerBuffer)
    return outBuffer

def dataToInt(data):
    outBuffer = []
    for tile in data:
        innerBuffer = []
        for val in tile:
            innerBuffer.append(int(val,16))
        outBuffer.append(innerBuffer)
    return outBuffer

def main():#this is so sloppy Im so sorry
    uFData = readData(Rdata)
    FData = dataToInt(uFData)
    z = calculateOffsets(FData)
    x = calculateClampChange(z)
    outData = writeData(x)
    print(outData)
main()